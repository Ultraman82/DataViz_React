{"version":3,"sources":["App/AppLayout.js","App/AppProvider.js","App/AppBar.js","Settings/WelcomeMessage.js","Settings/ConfirmButton.js","Settings/index.js","App/index.js","serviceWorker.js","index.js"],"names":["styled","div","_templateObject","cc","require","AppContext","React","createContext","AppProvider","_React$Component","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","componentDidMount","fetchCoins","asyncToGenerator","regenerator_default","a","mark","_callee","coinList","wrap","_context","prev","next","sent","Data","setState","console","log","stop","confirmFavorites","firstVisit","page","localStorage","setItem","JSON","stringify","test","setPage","state","objectSpread","savedSettings","inherits","createClass","key","value","parse","getItem","react_default","createElement","Provider","children","Component","Logo","AppBar_templateObject","Bar","_templateObject2","ControlButtonElem","_templateObject3","active","css","_templateObject4","ControlButton","_ref","name","Consumer","_ref2","lower","onClick","charAt","toUpperCase","substr","AppBar","WelcomeMessage","ConfirmButtonStyled","ConfirmButton_templateObject","ConfirmButton","ConfirmButton_templateObject2","Settings","App","AppLayout","AppProvider_AppProvider","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"yUAEeA,UAAOC,IAAtBC,6ECAMC,EAAKC,EAAQ,IAENC,EAAaC,IAAMC,gBAEnBC,EAAb,SAAAC,GACI,SAAAD,EAAYE,GAAM,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAN,IACdG,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAJ,GAAAS,KAAAH,KAAMJ,KASVQ,kBAAoB,WAChBP,EAAKQ,cAXSR,EAclBQ,WAdkBP,OAAAQ,EAAA,EAAAR,CAAAS,EAAAC,EAAAC,KAcL,SAAAC,IAAA,IAAAC,EAAA,OAAAJ,EAAAC,EAAAI,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAE,KAAA,EACa1B,EAAGsB,WADhB,OACLA,EADKE,EAAAG,KAC4BC,KACrCpB,EAAKqB,SAAS,CAACP,aACfQ,QAAQC,IAAIT,GAHH,wBAAAE,EAAAQ,SAAAX,MAdKb,EAoBlByB,iBAAmB,WACfzB,EAAKqB,SAAS,CACVK,YAAY,EACZC,KAAM,cAEVC,aAAaC,QAAQ,aAAcC,KAAKC,UAAU,CAC9CC,KAAM,YA1BIhC,EAoClBiC,QAAU,SAAAN,GAAI,OAAI3B,EAAKqB,SAAS,CAACM,UAlC7B3B,EAAKkC,MAALjC,OAAAkC,EAAA,EAAAlC,CAAA,CACI0B,KAAM,aACH3B,EAAKoC,gBAFZ,CAGIH,QAASjC,EAAKiC,QACdR,iBAAkBzB,EAAKyB,mBANbzB,EADtB,OAAAC,OAAAoC,EAAA,EAAApC,CAAAJ,EAAAC,GAAAG,OAAAqC,EAAA,EAAArC,CAAAJ,EAAA,EAAA0C,IAAA,gBAAAC,MAAA,WAgCQ,OADqBV,KAAKW,MAAMb,aAAac,QAAQ,eAI/C,GAFK,CAACf,KAAM,WAAYD,YAAY,KAjClD,CAAAa,IAAA,SAAAC,MAAA,WAwCQ,OACIG,EAAAhC,EAAAiC,cAAClD,EAAWmD,SAAZ,CAAqBL,MAAOrC,KAAK+B,OAC5B/B,KAAKJ,MAAM+C,cA1C5BjD,EAAA,CAAiCF,IAAMoD,8eCFvC,IAAMC,EAAO3D,IAAOC,IAAV2D,KAGJC,EAAM7D,IAAOC,IAAV6D,KAMHC,EAAoB/D,IAAOC,IAAV+D,IAEjB,SAAAtD,GAAK,OAAIA,EAAMuD,QAAUC,YAAhBC,OAQf,SAASC,EAATC,GAA8B,IAANC,EAAMD,EAANC,KACpB,OACIhB,EAAAhC,EAAAiC,cAAClD,EAAWkE,SAAZ,KACK,SAAAC,GAAA,IAPSC,EAOPnC,EAAFkC,EAAElC,KAAMM,EAAR4B,EAAQ5B,QAAR,OACGU,EAAAhC,EAAAiC,cAACQ,EAAD,CACGE,OAAU3B,IAASgC,EACnBI,QAAS,kBAAM9B,EAAQ0B,MAVpBG,EAYYH,GAXjBK,OAAO,GAAGC,cAAgBH,EAAMI,OAAO,MAoBzC,IAAAC,EAAA,WACX,OACIxB,EAAAhC,EAAAiC,cAACM,EAAD,KACIP,EAAAhC,EAAAiC,cAACI,EAAD,qBACAL,EAAAhC,EAAAiC,cAAA,YACAD,EAAAhC,EAAAiC,cAACa,EAAD,CAAeH,QAAM,EAACK,KAAO,cAC7BhB,EAAAhC,EAAAiC,cAACa,EAAD,CAAeE,KAAO,cC3CnBS,EAAA,SAAAV,GAAwBA,EAAbhC,WACxB,OACEiB,EAAAhC,EAAAiC,cAAClD,EAAWkE,SAAZ,KACG,SAAAC,GAAA,OAAAA,EAAEnC,WACYiB,EAAAhC,EAAAiC,cAAA,gFACwD,KAC1D,oQCLnB,IAAMyB,EAAsBhF,IAAOC,IAAVgF,KAWVC,GALUlF,IAAOC,IAAVkF,KAKP,WACX,OACA7B,EAAAhC,EAAAiC,cAAClD,EAAWkE,SAAZ,KACK,SAAAF,GAAA,IAAEjC,EAAFiC,EAAEjC,iBAAF,OACAkB,EAAAhC,EAAAiC,cAACyB,EAAD,CAAqBN,QAAStC,GAA9B,gCCfMgD,EAAA,WACX,OACI9B,EAAAhC,EAAAiC,cAAA,WACID,EAAAhC,EAAAiC,cAACwB,EAAD,MACAzB,EAAAhC,EAAAiC,cAAC2B,EAAD,QCYGG,MAZf,WACE,OACE/B,EAAAhC,EAAAiC,cAAC+B,EAAD,KACEhC,EAAAhC,EAAAiC,cAACgC,EAAD,KACEjC,EAAAhC,EAAAiC,cAACuB,EAAD,MACAxB,EAAAhC,EAAAiC,cAAC6B,EAAD,SCDYI,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOxC,EAAAhC,EAAAiC,cAACwC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.bad47ddc.chunk.js","sourcesContent":["import styled from 'styled-components';\n\nexport default styled.div`\n    padding: 40px;\n`","import React from 'react'\n\nconst cc = require('cryptocompare');\n\nexport const AppContext = React.createContext();\n\nexport class AppProvider extends React.Component{\n    constructor(props){\n        super(props);\n        this.state = {\n            page: 'dashboard',\n            ...this.savedSettings(),\n            setPage: this.setPage,\n            confirmFavorites: this.confirmFavorites\n        }\n    }    \n\n    componentDidMount = () => {\n        this.fetchCoins();\n    }\n\n    fetchCoins = async () => {\n        let coinList = (await cc.coinList()).Data;\n        this.setState({coinList});\n        console.log(coinList);\n    }\n\n    confirmFavorites = () => {\n        this.setState({\n            firstVisit: false,\n            page: 'dashboard'\n        });\n        localStorage.setItem('cryptoDash', JSON.stringify({\n            test: 'hello'\n        }))\n    }\n    savedSettings(){\n        let cryptoDashData = JSON.parse(localStorage.getItem('cryptoDash'));\n        if(!cryptoDashData){\n            return {page: 'settings', firstVisit: true}\n        }\n        return{};        \n    }\n    setPage = page => this.setState({page});\n\n    render(){\n        return(\n            <AppContext.Provider value={this.state}>                \n                {this.props.children}\n            </AppContext.Provider>\n        )\n    \n    }\n}","import React from 'react';\nimport styled, {css} from 'styled-components';\nimport { AppContext } from './AppProvider';\n\nconst Logo = styled.div`\n    font-size: 1.5em;\n`\nconst Bar = styled.div`\n    display: grid;\n    margin-bottom: 40px\n    grid-template-columns: 180px auto 100px 180px;\n`\n\nconst ControlButtonElem = styled.div`\n    cursor: pointer;\n    ${props => props.active && css`\n        text-shadow: 0px 0px 60px #03ff03;\n    `}\n`\nfunction toProperCase(lower){\n    return lower.charAt(0).toUpperCase() + lower.substr(1);\n}\n\nfunction ControlButton({name}){\n    return (\n        <AppContext.Consumer>\n            {({page, setPage}) => (\n                <ControlButtonElem\n                   active = {page === name}\n                   onClick={() => setPage(name)}\n                >\n                    {toProperCase(name)}\n                </ControlButtonElem>\n            )}\n        </AppContext.Consumer>\n    )\n    \n}\n\n\nexport default function(){\n    return(\n        <Bar>\n            <Logo> CryptoDash </Logo>\n            <div/>\n            <ControlButton active name = \"dashboard\"/>\n            <ControlButton name = \"setting\"/>\n        </Bar>    \n    )\n}","import React from 'react';\nimport {AppContext} from \"../App/AppProvider\";\n\nexport default function ({firstVisit}) {\n  return (\n    <AppContext.Consumer>\n      {({firstVisit}) => \n        firstVisit ? <div>\n          Welcome to CryptoDash, please select your favorite coins to bdgin.{' '}\n          </div> : null\n      }\n\n    </AppContext.Consumer>\n\n  )\n  \n  \n}\n\n\n\n\n\n\n","import React from 'react';\nimport styled from 'styled-components';\nimport {AppContext} from \"../App/AppProvider\";\n\nconst ConfirmButtonStyled = styled.div`\n    margin: 20px;\n    color: green;\n    cursor: pointer;\n`\n\nexport const CenterDiv = styled.div`\n    display: grid;\n    justify-counter: center;\n`\n\nexport default function (){\n    return (\n    <AppContext.Consumer>\n        {({confirmFavorites}) =>\n         <ConfirmButtonStyled onClick={confirmFavorites}>\n            Confirm confirmFavorites\n        </ConfirmButtonStyled>}\n    </AppContext.Consumer>\n\n    )\n\n}","import React from 'react';\nimport WelcomeMessage from './WelcomeMessage';\nimport ConfirmButton from './ConfirmButton';\n\nexport default function(){\n    return (\n        <div>\n            <WelcomeMessage/>\n            <ConfirmButton/> \n        </div>\n    \n    )\n}","import React from 'react';\nimport './App.css';\n/* import Welcome from '../Settings/WelcomeMessage'; */\nimport styled, {css} from 'styled-components';\nimport AppLayout from './AppLayout'\nimport AppBar from './AppBar';\nimport {AppProvider} from './AppProvider';\nimport Settings from '../Settings'\nfunction App() {\n  return (\n    <AppLayout>\n      <AppProvider>\n        <AppBar />\n        <Settings />\n      </AppProvider>\n      \n    </AppLayout>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}